#include "Common.h"
#include "Graphics.h"
#include "Vertex.h"

struct Pos
{
	float x, y, z; //positon
	float rotX, rotY, rotZ; //rotation
};

Vertex verts[] = {
	//front
		{ -0.5f, 0.5f, 0.5f,
		1.0f, 0.0f, 1.0f, 1.0f }, //top left
		{ -0.5f, -0.5f, 0.5f,
		1.0f, 1.0f, 0.0f, 1.0f }, //bottom left
		{ 0.5f, -0.5f, 0.5f,
		0.0f, 1.0f, 1.0f, 1.0f }, //bottom right
		{ 0.5f, 0.5f, 0.5f,
		1.0f, 0.0f, 1.0f, 1.0f }, //top right
	//back
		{ -0.5f, 0.5f, -0.5f,
		1.0f, 0.0f, 1.0f, 1.0f }, //top left 
		{ -0.5f, -0.5f, -0.5f,
		1.0f, 1.0f, 0.0f, 1.0f }, //bottom left 
		{ 0.5f, -0.5f, -0.5f,
		0.0f, 0.5f, 0.5f, 0.5f }, //bottom right
		{ 0.5f, 0.5f, -0.5f,
		1.0f, 0.0f, 1.0f, 1.0f }, //top right 
};

GLuint indices[] = {
	//front
	0, 1, 2,
	0, 3, 2,
	//left
	4, 5, 1,
	4, 1, 0,
	//right
	3, 7, 2,
	7, 6, 2,
	//bottom
	1, 5, 2,
	6, 2, 5,
	//top
	4, 0, 7,
	0, 7, 3,
	//back
	4, 5, 6,
	4, 7, 6,
};

GLuint VBO;
GLuint EBO;
Pos cube1 = { 1, 1, 0, 0, 0, 0};
Pos cube2 = { -1, -1, 0, 0, 0, 0};
Pos world = { 0.0f, 0.0f, 6.0f, 0.0f, 0.0f, 0.0f };
Pos fixedPoint = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };

void render()
{
	//set the clear colour background 
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	//clear the color and depth buffer
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	//make the new VBO active. repeat here as a sanity check(may have changed since initialisation)
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	//the 3 param is now filled out, the pipeline needs to know the size of each vertex
	glVertexPointer(3, GL_FLOAT, sizeof(Vertex), NULL);
	//the last param basically says that the colours start 3 floats into each element of the array
	glColorPointer(4, GL_FLOAT, sizeof(Vertex), (void**)(3 * sizeof(float)));
	//establish array contains vertices and colours
	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_COLOR_ARRAY);

	//switch to model view
	glMatrixMode(GL_MODELVIEW);
	//reset using the identity matrix 
	glLoadIdentity();
	//calculate the view matrix to see 3D stuff
	gluLookAt(world.x, world.y, world.z, fixedPoint.x, fixedPoint.y, fixedPoint.z, 0.0, 1.0, 0.0);
	//translate 
	glTranslatef(cube1.x, cube1.y, cube1.z);
	glRotatef(cube1.rotX, 1.0f, 0.0f, 0.0f);
	glRotatef(cube1.rotY, 0.0f, 1.0f, 0.0f);
	glRotatef(cube1.rotZ, 0.0f, 0.0f, 1.0f);
	//begin drawing triangle 
	glDrawElements(GL_TRIANGLES, sizeof(indices) / sizeof(GLuint), GL_UNSIGNED_INT, 0);

	//reset using the identity matrix 
	glLoadIdentity();
	//calculate the view matrix to see 3D stuff
	gluLookAt(world.x, world.y, world.z, fixedPoint.x, fixedPoint.y, fixedPoint.z, 0.0, 1.0, 0.0);
	//translate 
	glTranslatef(cube2.x, cube2.y, cube2.z);
	glRotatef(cube2.rotX, 1.0f, 0.0f, 0.0f);
	glRotatef(cube2.rotY, 0.0f, 1.0f, 0.0f);
	glRotatef(cube2.rotZ, 0.0f, 0.0f, 1.0f);
	//begin drawing triangle 
	glDrawElements(GL_TRIANGLES, sizeof(indices) / sizeof(GLuint), GL_UNSIGNED_INT, 0);

}

void update()
{

}

void initScene()
{
	//create buffer
	glGenBuffers(1, &VBO);
	//make the VBO active
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	//copy vertex data to VBO
	glBufferData(GL_ARRAY_BUFFER, sizeof(verts), verts, GL_STATIC_DRAW);

	//create buffer 
	glGenBuffers(1, &EBO);
	//make the EBO active
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	//copy the index date to the ebo
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
}

void cleanUp()
{
	glDeleteBuffers(1, &EBO);
	glDeleteBuffers(1, &VBO);
}

int main(int argc, char * arg[])
{
	bool run = true;

	//init everything - SDL, if it is nonZero we have a problem
	if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
	{
		std::cout << "ERROR SDL_Init " << SDL_GetError() << std::endl;

		return -1;
	}

	//create a window 
	SDL_Window * window = SDL_CreateWindow("SDL", //window title
		SDL_WINDOWPOS_CENTERED, // x position centered
		SDL_WINDOWPOS_CENTERED, //y position centered
		640, //width in pixels 
		480, //height in pixels 
		SDL_WINDOW_OPENGL //flags
		);

	//create an openGL context associated with the window
	SDL_GLContext glcontext = SDL_GL_CreateContext(window);

	//initalisation
	//call our initOpenGL function
	initOpenGL();
	//call our initScene function with the vertex buffer object
	initScene();
	//set our viewport
	setViewport(640, 480);

	//value to hold the event generated by SDL
	SDL_Event event;
	//game loop
	while (run)
	{
		//while we still have events in the queue
		while (SDL_PollEvent(&event))
		{
			//get event type
			if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE)
			{
				//set our bool which controls the loop to false
				run = false;
			}
			if (event.type == SDL_KEYDOWN)
			{
				std::cout << "keyDown_";
				//move cube
				if (event.key.keysym.sym == SDLK_UP)
				{
					std::cout << "up" << std::endl;
					cube1.y += 0.01;
				}
				else if (event.key.keysym.sym == SDLK_DOWN)
				{
					std::cout << "down" << std::endl;
					cube1.y -= 0.01;
				}
				else if (event.key.keysym.sym == SDLK_RIGHT)
				{
					std::cout << "right" << std::endl;
					cube1.x += 0.01;
				}
				else if (event.key.keysym.sym == SDLK_LEFT)
				{
					std::cout << "left" << std::endl;
					cube1.x -= 0.01;
				}
				//rotate cube
				else if (event.key.keysym.sym == SDLK_w)
				{
					std::cout << "w" << std::endl;
					cube2.rotX += -1;
				}
				else if (event.key.keysym.sym == SDLK_s)
				{
					std::cout << "s" << std::endl;
					cube2.rotX += 1;
				}
				else if (event.key.keysym.sym == SDLK_d)
				{
					std::cout << "d" << std::endl;
					cube2.rotY += 1;
				}
				else if (event.key.keysym.sym == SDLK_a)
				{
					std::cout << "a" << std::endl;
					cube2.rotY += -1;
				}
				//move camera
				else if (event.key.keysym.sym == SDLK_i)
				{
					std::cout << "i" << std::endl;
					world.z += -1;
					fixedPoint.z += -1;
				}
				else if (event.key.keysym.sym == SDLK_k)
				{
					std::cout << "k" << std::endl;
					world.z += 1;
					fixedPoint.z += 1;
				}
				else if (event.key.keysym.sym == SDLK_l)
				{
					std::cout << "l" << std::endl;
					world.x += 1;
					fixedPoint.x += 1;
				}
				else if (event.key.keysym.sym == SDLK_j)
				{
					std::cout << "j" << std::endl;
					world.x += -1;
					fixedPoint.x += -1;
				}
				//end 
				else
				{
					std::cout << " " << std::endl;
				}
			}
		}

		//update 
		update();
		//then draw
		render();

		//call swap so that our GL back buffer is displayed
		SDL_GL_SwapWindow(window);

	}

	//clean up in reverse order
	//clean out the buffers 
	cleanUp();
	//destroy openGL
	SDL_GL_DeleteContext(glcontext);
	//destroy window
	SDL_DestroyWindow(window);
	//destroy initalization 
	SDL_Quit;

    return 0;
}
